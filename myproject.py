# -*- coding: utf-8 -*-
"""MyProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ai33AnG1nJWAuS2XwYAFRUZOIt84F64R
"""

import numpy as np
import pandas as pd

df = pd.read_excel('/content/2022 Data test2.xlsx')
df.head()

!pip install sweetviz

# importing sweetviz library
import sweetviz as sv

#analyzing the dataset
advert_report = sv.analyze(df)

#display the report
advert_report.show_html('Advertising.html')

advert_report.show_notebook()

df.head()

df.columns

#Average Sum Assured Per Life
df['Sum Assured per Life'] = df['Sum Assured (if any)(RM)']/df['No. of Lives']
df.columns

df['Sum Assured per Life'].head()

df2 = df

df2['Bill Date'] = df2['Bill Date'].astype(str)
df2['Bill Date'].head()

df2['Bill Transaction Date']

df2['Bill Transaction Date'] = df2['Bill Transaction Date'].astype({'Bill Transaction Date': 'datetime64[ns]'})
df2['Bill Transaction Date']

import datetime as dt
df2['Bill Transaction Date'].dt.strftime('%m')

#Average Sum Assured Per Life
df2['Month'] = df2['Bill Transaction Date'].dt.strftime('%m')
df2.columns

import pandas as pd
import matplotlib.pyplot as plt

pivot_table = pd.pivot_table(df2, values='Premium(RM)', index='Transaction type')

pivot_table.plot(kind='bar')

plt.title('Premium of Transaction Type')
plt.xlabel('Transaction type')
plt.ylabel('Premium')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

pivot_table = pd.pivot_table(df2, values='Premium(RM)', index='Month', columns='Transaction type')

pivot_table.plot(kind='line')

plt.title('Premium of Transaction type by Month')
plt.xlabel('Month')
plt.ylabel('Transaction type')

plt.show()

"""**Unsupervised Learning**"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""**EDA**"""

df.shape

df.describe()

df.info()

df.columns

df2 = df.select_dtypes(exclude=['object','datetime64[ns]'])
df2 = df2.drop(['Tax Rate Type'],axis = 1)
df2.info()

#df2.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)
df2.dropna()

df2.shape

df2.columns

df2 = df2[~np.isnan(df2)]

df3 = df2

df3.fillna(0, inplace=True)

df3.shape
df3.head()

np.any(np.isnan(df3))

df3.head(100)

df2.shape

X = df3.drop(['Bill Status (As on run date)'], axis=1) #1 =col 0 = row
y = df3['Bill Status (As on run date)']

print(X.shape, y.shape)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

print(X_train.shape, X_test.shape)
print(y_train.shape, y_test.shape)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
#print(X_train)
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
#print(X_train)

"""**K-Means** **Clustering**"""

import pandas as pd

# Calculate the IQR of the data
Q1 = df2.quantile(0.25)
Q3 = df2.quantile(0.75)
IQR = Q3 - Q1
# Remove the outliers
df3 = df3[~((df3 < (Q1 - 1.5 * IQR)) | (df3 > (Q3 + 1.5 * IQR))).any(axis=1)]
df3 = df3[df3['Transaction type'] == '2']

df3.shape

plt.boxplot(df3)
plt.xlabel('Variable')
plt.ylabel('Value')
plt.title('Box Plot Example')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

no_of_clusters = [2, 3, 4, 5]

for n_clusters in no_of_clusters:

	cluster = KMeans(n_clusters = n_clusters)
	cluster_labels = cluster.fit_predict(X)

	silhouette_avg = silhouette_score(X, cluster_labels)

	print("For no of clusters =", n_clusters,
		" The average silhouette_score is :", silhouette_avg)

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=4)
kmeans.fit(X)
y_kmeans = kmeans.predict(X)

X.columns

plt.scatter(X.iloc[:, 1], X.iloc[:, 6], c=y_kmeans, s=50, cmap='viridis')

centers = kmeans.cluster_centers_
plt.scatter(centers[:, 1], centers[:, 6], c='red', s=200, alpha=0.5);

distortions = []
for k in no_of_clusters:
    kmeanModel = KMeans(n_clusters=k)
    kmeanModel.fit(X)
    distortions.append(kmeanModel.inertia_)

plt.figure(figsize=(16,8))
plt.plot(no_of_clusters, distortions, 'bx-')
plt.xlabel('k')
plt.ylabel('Distortion')
plt.title('The Elbow Method showing the optimal k')
plt.show()

"""**PCA**"""

np.any(np.isnan(df2 ))

X_train = X_train[~np.isnan(X_train)]

X_train.shape

from sklearn.decomposition import PCA

pca = PCA().fit(X_train)
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.xlabel('number of components')
plt.ylabel('cumulative explained variance');

accum_explained_var = np.cumsum(pca.explained_variance_ratio_)

min_threshold = np.argmax(accum_explained_var > 0.90) # use 90%

min_threshold

pca = PCA(n_components = min_threshold + 1)

X_train_projected= pca.fit_transform(X_train)
X_test_projected = pca.transform(X_test)

X_train_projected.shape

# Commented out IPython magic to ensure Python compatibility.
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
# %matplotlib inline

#Transform features
pca = PCA()
X_pca = pca.fit_transform(X)

#Merge with df
pca_df = pd.DataFrame(X_pca,columns=['PC1','PC2','PC3','PC4','PC5','PC6','PC7','PC8','PC9','PC10','PC11','PC12','PC13','PC13','PC13','PC13','PC13','PC13','PC13','PC13','PC13','PC13'])
df3 = pd.merge(df2, pca_df, right_index=True, left_index=True)

print('Explained Variance Ratio')
for i in range(13):
    print('PC{}: {}'.format(i+1,pca.explained_variance_ratio_[i]))

sns.stripplot(x="PC1", y="V", data=df3,jitter=True)
plt.title('Transaction type Data Visualized in One Dimension');

pca = PCA()
pca.fit(X)

cumsum = np.cumsum(pca.explained_variance_ratio_)
dim = np.arange(len(cumsum))+1

plt.plot(dim,cumsum,'-',lw=3);

plt.xlabel('Dimensions')
plt.ylabel('Variance Explained')
plt.title('Selecting the right number of dimensions')

plt.xticks([1,2,3,4])
plt.ylim([0,1.1]);

sns.lmplot('PC1','PC2',data=df3,hue='Wine',fit_reg=False)
plt.title('Wine Data Visualized in Two Dimensions');

sns.lmplot('PC1','PC3',data=df3,hue='Wine',fit_reg=False)
plt.title('Wine Data Visualized in Two Dimensions');

sns.lmplot('PC2','PC3',data=df3,hue='Wine',fit_reg=False)
plt.title('Wine Data Visualized in Two Dimensions');

df2 = df

import pandas as pd

# Calculate the IQR of the data
Q1 = df2.quantile(0.25)
Q3 = df2.quantile(0.75)
IQR = Q3 - Q1

df2 = df2[~np.isnan(df2)]

# Remove the outliers
df2 = df2[~((df2 < (Q1 - 1.5 * IQR)) | (df2 > (Q3 + 1.5 * IQR))).any(axis=1)]

import pandas as pd
from sklearn.linear_model import LinearRegression

X = df2[['Sum Assured (if any)(RM)']]
Y = df2['Premium(RM)']

# Create a linear regression object
reg = LinearRegression()

# Fit the regression model to the data
reg.fit(X, Y)

# Print the slope and intercept
print('Slope: ', reg.coef_[0])
print('Intercept: ', reg.intercept_)

X_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)
y_pred = reg.predict(X_range)

# Plot the data and the regression line
plt.scatter(X, Y)
plt.plot(X_range, y_pred, color='red')

# Set the chart title and axis labels
plt.title('Linear Regression')
plt.xlabel('X')
plt.ylabel('Y')

# Display the chart
plt.show()

df2 = df

import pandas as pd

# Calculate the IQR of the data
Q1 = df2.quantile(0.25)
Q3 = df2.quantile(0.75)
IQR = Q3 - Q1

df2 = df2[~np.isnan(df2)]

# Remove the outliers
df2 = df2[~((df2 < (Q1 - 1.5 * IQR)) | (df2 > (Q3 + 1.5 * IQR))).any(axis=1)]
df3 = df2[df2['Transaction type'] == "New Policies Issued"]

df2.head()